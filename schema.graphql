schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""An object with globally unique ID"""
interface Node {
  """A globally unique identifier"""
  id: ID!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "category"
"""
type category implements Node {
  created_at: timestamptz!
  id: ID!

  """An array relationship"""
  ingredients(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): [ingredients!]!

  """An aggregate relationship"""
  ingredients_aggregate(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): ingredients_aggregate!

  """An array relationship connection"""
  ingredients_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): ingredientsConnection!
  name: String!
}

"""
A Relay connection object on "category"
"""
type categoryConnection {
  edges: [categoryEdge!]!
  pageInfo: PageInfo!
}

type categoryEdge {
  cursor: String!
  node: category!
}

"""
Boolean expression to filter rows from the table "category". All fields are combined with a logical 'AND'.
"""
input category_bool_exp {
  _and: [category_bool_exp!]
  _not: category_bool_exp
  _or: [category_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  ingredients: ingredients_bool_exp
  ingredients_aggregate: ingredients_aggregate_bool_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "category"
"""
enum category_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  category_name_key

  """
  unique or primary key constraint on columns "id"
  """
  category_pkey
}

"""
input type for inserting data into table "category"
"""
input category_insert_input {
  created_at: timestamptz
  id: uuid
  ingredients: ingredients_arr_rel_insert_input
  name: String
}

"""
response of any mutation on the table "category"
"""
type category_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [category!]!
}

"""
input type for inserting object relation for remote table "category"
"""
input category_obj_rel_insert_input {
  data: category_insert_input!

  """upsert condition"""
  on_conflict: category_on_conflict
}

"""
on_conflict condition type for table "category"
"""
input category_on_conflict {
  constraint: category_constraint!
  update_columns: [category_update_column!]! = []
  where: category_bool_exp
}

"""Ordering options when selecting data from "category"."""
input category_order_by {
  created_at: order_by
  id: order_by
  ingredients_aggregate: ingredients_aggregate_order_by
  name: order_by
}

"""primary key columns input for table: category"""
input category_pk_columns_input {
  id: uuid!
}

"""
select columns of table "category"
"""
enum category_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "category"
"""
input category_set_input {
  created_at: timestamptz
  id: uuid
  name: String
}

"""
update columns of table "category"
"""
enum category_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name
}

input category_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: category_set_input

  """filter the rows which have to be updated"""
  where: category_bool_exp!
}

"""
columns and relationships of "ingredients"
"""
type ingredients implements Node {
  """An object relationship"""
  category: category
  categoryId: uuid
  created_at: timestamptz!

  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: numeric
  histamine_severity_num: Int!
  id: ID!
  name: String!
  note: String
}

"""
A Relay connection object on "ingredients"
"""
type ingredientsConnection {
  edges: [ingredientsEdge!]!
  pageInfo: PageInfo!
}

type ingredientsEdge {
  cursor: String!
  node: ingredients!
}

"""
aggregated selection of "ingredients"
"""
type ingredients_aggregate {
  aggregate: ingredients_aggregate_fields
  nodes: [ingredients!]!
}

input ingredients_aggregate_bool_exp {
  count: ingredients_aggregate_bool_exp_count
}

input ingredients_aggregate_bool_exp_count {
  arguments: [ingredients_select_column!]
  distinct: Boolean
  filter: ingredients_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "ingredients"
"""
type ingredients_aggregate_fields {
  avg: ingredients_avg_fields
  count(columns: [ingredients_select_column!], distinct: Boolean): Int!
  max: ingredients_max_fields
  min: ingredients_min_fields
  stddev: ingredients_stddev_fields
  stddev_pop: ingredients_stddev_pop_fields
  stddev_samp: ingredients_stddev_samp_fields
  sum: ingredients_sum_fields
  var_pop: ingredients_var_pop_fields
  var_samp: ingredients_var_samp_fields
  variance: ingredients_variance_fields
}

"""
order by aggregate values of table "ingredients"
"""
input ingredients_aggregate_order_by {
  avg: ingredients_avg_order_by
  count: order_by
  max: ingredients_max_order_by
  min: ingredients_min_order_by
  stddev: ingredients_stddev_order_by
  stddev_pop: ingredients_stddev_pop_order_by
  stddev_samp: ingredients_stddev_samp_order_by
  sum: ingredients_sum_order_by
  var_pop: ingredients_var_pop_order_by
  var_samp: ingredients_var_samp_order_by
  variance: ingredients_variance_order_by
}

"""
input type for inserting array relation for remote table "ingredients"
"""
input ingredients_arr_rel_insert_input {
  data: [ingredients_insert_input!]!

  """upsert condition"""
  on_conflict: ingredients_on_conflict
}

"""aggregate avg on columns"""
type ingredients_avg_fields {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: Float
  histamine_severity_num: Float
}

"""
order by avg() on columns of table "ingredients"
"""
input ingredients_avg_order_by {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: order_by
  histamine_severity_num: order_by
}

"""
Boolean expression to filter rows from the table "ingredients". All fields are combined with a logical 'AND'.
"""
input ingredients_bool_exp {
  _and: [ingredients_bool_exp!]
  _not: ingredients_bool_exp
  _or: [ingredients_bool_exp!]
  category: category_bool_exp
  categoryId: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  histamine: numeric_comparison_exp
  histamine_severity_num: Int_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  note: String_comparison_exp
}

"""
unique or primary key constraints on table "ingredients"
"""
enum ingredients_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  ingredients_name_key

  """
  unique or primary key constraint on columns "id"
  """
  ingredients_pkey
}

"""
input type for incrementing numeric columns in table "ingredients"
"""
input ingredients_inc_input {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: numeric
  histamine_severity_num: Int
}

"""
input type for inserting data into table "ingredients"
"""
input ingredients_insert_input {
  category: category_obj_rel_insert_input
  categoryId: uuid
  created_at: timestamptz

  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: numeric
  histamine_severity_num: Int
  id: uuid
  name: String
  note: String
}

"""aggregate max on columns"""
type ingredients_max_fields {
  categoryId: uuid
  created_at: timestamptz

  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: numeric
  histamine_severity_num: Int
  id: uuid
  name: String
  note: String
}

"""
order by max() on columns of table "ingredients"
"""
input ingredients_max_order_by {
  categoryId: order_by
  created_at: order_by

  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: order_by
  histamine_severity_num: order_by
  id: order_by
  name: order_by
  note: order_by
}

"""aggregate min on columns"""
type ingredients_min_fields {
  categoryId: uuid
  created_at: timestamptz

  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: numeric
  histamine_severity_num: Int
  id: uuid
  name: String
  note: String
}

"""
order by min() on columns of table "ingredients"
"""
input ingredients_min_order_by {
  categoryId: order_by
  created_at: order_by

  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: order_by
  histamine_severity_num: order_by
  id: order_by
  name: order_by
  note: order_by
}

"""
response of any mutation on the table "ingredients"
"""
type ingredients_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ingredients!]!
}

"""
on_conflict condition type for table "ingredients"
"""
input ingredients_on_conflict {
  constraint: ingredients_constraint!
  update_columns: [ingredients_update_column!]! = []
  where: ingredients_bool_exp
}

"""Ordering options when selecting data from "ingredients"."""
input ingredients_order_by {
  category: category_order_by
  categoryId: order_by
  created_at: order_by
  histamine: order_by
  histamine_severity_num: order_by
  id: order_by
  name: order_by
  note: order_by
}

"""primary key columns input for table: ingredients"""
input ingredients_pk_columns_input {
  id: uuid!
}

"""
select columns of table "ingredients"
"""
enum ingredients_select_column {
  """column name"""
  categoryId

  """column name"""
  created_at

  """column name"""
  histamine

  """column name"""
  histamine_severity_num

  """column name"""
  id

  """column name"""
  name

  """column name"""
  note
}

"""
input type for updating data in table "ingredients"
"""
input ingredients_set_input {
  categoryId: uuid
  created_at: timestamptz

  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: numeric
  histamine_severity_num: Int
  id: uuid
  name: String
  note: String
}

"""aggregate stddev on columns"""
type ingredients_stddev_fields {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: Float
  histamine_severity_num: Float
}

"""
order by stddev() on columns of table "ingredients"
"""
input ingredients_stddev_order_by {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: order_by
  histamine_severity_num: order_by
}

"""aggregate stddev_pop on columns"""
type ingredients_stddev_pop_fields {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: Float
  histamine_severity_num: Float
}

"""
order by stddev_pop() on columns of table "ingredients"
"""
input ingredients_stddev_pop_order_by {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: order_by
  histamine_severity_num: order_by
}

"""aggregate stddev_samp on columns"""
type ingredients_stddev_samp_fields {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: Float
  histamine_severity_num: Float
}

"""
order by stddev_samp() on columns of table "ingredients"
"""
input ingredients_stddev_samp_order_by {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: order_by
  histamine_severity_num: order_by
}

"""aggregate sum on columns"""
type ingredients_sum_fields {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: numeric
  histamine_severity_num: Int
}

"""
order by sum() on columns of table "ingredients"
"""
input ingredients_sum_order_by {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: order_by
  histamine_severity_num: order_by
}

"""
update columns of table "ingredients"
"""
enum ingredients_update_column {
  """column name"""
  categoryId

  """column name"""
  created_at

  """column name"""
  histamine

  """column name"""
  histamine_severity_num

  """column name"""
  id

  """column name"""
  name

  """column name"""
  note
}

input ingredients_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ingredients_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: ingredients_set_input

  """filter the rows which have to be updated"""
  where: ingredients_bool_exp!
}

"""aggregate var_pop on columns"""
type ingredients_var_pop_fields {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: Float
  histamine_severity_num: Float
}

"""
order by var_pop() on columns of table "ingredients"
"""
input ingredients_var_pop_order_by {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: order_by
  histamine_severity_num: order_by
}

"""aggregate var_samp on columns"""
type ingredients_var_samp_fields {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: Float
  histamine_severity_num: Float
}

"""
order by var_samp() on columns of table "ingredients"
"""
input ingredients_var_samp_order_by {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: order_by
  histamine_severity_num: order_by
}

"""aggregate variance on columns"""
type ingredients_variance_fields {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: Float
  histamine_severity_num: Float
}

"""
order by variance() on columns of table "ingredients"
"""
input ingredients_variance_order_by {
  """mg/kg, very high: > 2000, high: > 500, medium: > 200, low: < 199"""
  histamine: order_by
  histamine_severity_num: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "category"
  """
  delete_category(
    """filter the rows which have to be deleted"""
    where: category_bool_exp!
  ): category_mutation_response

  """
  delete single row from the table: "category"
  """
  delete_category_by_pk(id: uuid!): category

  """
  delete data from the table: "ingredients"
  """
  delete_ingredients(
    """filter the rows which have to be deleted"""
    where: ingredients_bool_exp!
  ): ingredients_mutation_response

  """
  delete single row from the table: "ingredients"
  """
  delete_ingredients_by_pk(id: uuid!): ingredients

  """
  insert data into the table: "category"
  """
  insert_category(
    """the rows to be inserted"""
    objects: [category_insert_input!]!

    """upsert condition"""
    on_conflict: category_on_conflict
  ): category_mutation_response

  """
  insert a single row into the table: "category"
  """
  insert_category_one(
    """the row to be inserted"""
    object: category_insert_input!

    """upsert condition"""
    on_conflict: category_on_conflict
  ): category

  """
  insert data into the table: "ingredients"
  """
  insert_ingredients(
    """the rows to be inserted"""
    objects: [ingredients_insert_input!]!

    """upsert condition"""
    on_conflict: ingredients_on_conflict
  ): ingredients_mutation_response

  """
  insert a single row into the table: "ingredients"
  """
  insert_ingredients_one(
    """the row to be inserted"""
    object: ingredients_insert_input!

    """upsert condition"""
    on_conflict: ingredients_on_conflict
  ): ingredients

  """
  update data of the table: "category"
  """
  update_category(
    """sets the columns of the filtered rows to the given values"""
    _set: category_set_input

    """filter the rows which have to be updated"""
    where: category_bool_exp!
  ): category_mutation_response

  """
  update single row of the table: "category"
  """
  update_category_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: category_set_input
    pk_columns: category_pk_columns_input!
  ): category

  """
  update multiples rows of table: "category"
  """
  update_category_many(
    """updates to execute, in order"""
    updates: [category_updates!]!
  ): [category_mutation_response]

  """
  update data of the table: "ingredients"
  """
  update_ingredients(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ingredients_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ingredients_set_input

    """filter the rows which have to be updated"""
    where: ingredients_bool_exp!
  ): ingredients_mutation_response

  """
  update single row of the table: "ingredients"
  """
  update_ingredients_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ingredients_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ingredients_set_input
    pk_columns: ingredients_pk_columns_input!
  ): ingredients

  """
  update multiples rows of table: "ingredients"
  """
  update_ingredients_many(
    """updates to execute, in order"""
    updates: [ingredients_updates!]!
  ): [ingredients_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "category"
  """
  category_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [category_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): categoryConnection!

  """An array relationship connection"""
  ingredients_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): ingredientsConnection!
  node(
    """A globally unique id"""
    id: ID!
  ): Node
}

type subscription_root {
  """
  fetch data from the table: "category"
  """
  category_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [category_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): categoryConnection!

  """An array relationship connection"""
  ingredients_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): ingredientsConnection!
  node(
    """A globally unique id"""
    id: ID!
  ): Node
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

